// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid()) 
  doUser    Boolean
  doAdmin   Boolean
  doDevelop Boolean

  user User?
}

model Avatar {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?

  @@map("avatars")
}

model TypeUser {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("type_users")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String

  avatar   Avatar  @relation(fields: [avatarId], references: [id])
  avatarId String @unique

  role  Role   @relation(fields: [roleId], references: [id])
  roleId String @unique

  typeUserId Int 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clusoseRecord ClusoseRecord[] @relation("UserClusoseRecords")
  clusoseRecordRegister ClusoseRecord[] @relation("UserRegisterClusoseRecords")

  @@map("users")
}

model ClusoseRecord {
  id        String   @id @default(cuid())
  clucoseLevel  Float @map("clucose_level")
  fasting  Boolean
  notes    String?

  user User @relation("UserClusoseRecords", fields: [userId], references: [id])
  userId String

  userRegister User? @relation("UserRegisterClusoseRecords", fields: [userRegisterId], references: [id])
  userRegisterId String?

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clusose_records")
}